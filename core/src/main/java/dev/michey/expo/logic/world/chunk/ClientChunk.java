package dev.michey.expo.logic.world.chunk;

import dev.michey.expo.noise.BiomeType;
import dev.michey.expo.render.RenderContext;
import dev.michey.expo.server.main.logic.world.chunk.DynamicTilePart;
import dev.michey.expo.util.ExpoShared;
import dev.michey.expo.util.Pair;

import static dev.michey.expo.util.ExpoShared.CHUNK_SIZE;
import static dev.michey.expo.util.ExpoShared.TILE_SIZE;

public class ClientChunk {

    // passed by server
    public int chunkX;
    public int chunkY;
    public BiomeType[] biomes;
    public ClientDynamicTilePart[][] dynamicTiles;

    // SET BY CLIENT
    public Pair[][] layer1Displacement;

    // generated by client
    public boolean chunkContainsWater;
    public int chunkDrawBeginX;
    public int chunkDrawBeginY;
    public int chunkDrawEndX;
    public int chunkDrawEndY;
    public boolean visible;

    public void updateVisibility() {
        visible = RenderContext.get().inDrawBounds(this);
    }

    public ClientChunk(int chunkX, int chunkY, BiomeType[] biomes, DynamicTilePart[][] dynamicTiles) {
        this.chunkX = chunkX;
        this.chunkY = chunkY;
        this.biomes = biomes;
        this.dynamicTiles = convertToClient(dynamicTiles);

        chunkDrawBeginX = ExpoShared.chunkToPos(chunkX);
        chunkDrawBeginY = ExpoShared.chunkToPos(chunkY);
        chunkDrawEndX = chunkDrawBeginX + CHUNK_SIZE;
        chunkDrawEndY = chunkDrawBeginY + CHUNK_SIZE;

        for(BiomeType t : biomes) {
            if(BiomeType.isWater(t)) {
                chunkContainsWater = true;
                break;
            }
        }

        if(chunkContainsWater) {
            layer1Displacement = new Pair[dynamicTiles.length][];

            for(int i = 0; i < layer1Displacement.length; i++) {
                var tiles = dynamicTiles[i];

                for(DynamicTilePart tile : tiles) {
                    int[] ids = tile.layerIds;

                    if(BiomeType.isWater(biomes[i]) && biomes[i] != BiomeType.OCEAN_DEEP && ids.length > 1) {
                        Pair[] array = new Pair[ids.length];

                        for(int a = 0; a < ids.length; a++) {
                            array[a] = idToDir(ids[a]);
                        }

                        layer1Displacement[i] = array;
                    }
                }
            }
        }
    }

    public void updateSingle(int layer, int tileArray, DynamicTilePart tile) {
        dynamicTiles[tileArray][layer].updateFrom(tile);
    }

    public void update(BiomeType[] biomes, DynamicTilePart[][] individualTileData) {
        this.biomes = biomes;

        for(int i = 0; i < individualTileData.length; i++) {
            DynamicTilePart[] server = individualTileData[i];
            ClientDynamicTilePart[] client = this.dynamicTiles[i];

            for(int j = 0; j < server.length; j++) {
                client[j].updateFrom(server[j]);
            }
        }
    }

    private Pair<Integer, Integer> idToDir(int id) {
        int dirX = 0, dirY = 0;
        int del = id >= 90 ? 90 : 46;

        switch(id - del) {
            case 3, 6 -> {
                dirX = 0;
                dirY = -1;
            }
            case 2 -> {
                dirX = 1;
                dirY = -1;
            }
            case 9, 15 -> {
                dirX = -1;
                dirY = 0;
            }
            case 4, 10 -> {
                dirX = 1;
                dirY = 0;
            }
            case 7 -> {
                dirX = -1;
                dirY = -1;
            }
            case 12 -> {
                dirX = 1;
                dirY = 1;
            }
            case 13, 16 -> {
                dirX = 0;
                dirY = 1;
            }
            case 17 -> {
                dirX = -1;
                dirY = 1;
            }
            case 18, 19, 20, 21 -> {
                dirX = 0;
                dirY = 0;
            }
        }

        return new Pair<>(dirX, dirY);
    }

    private ClientDynamicTilePart[][] convertToClient(DynamicTilePart[][] tiles) {
        ClientDynamicTilePart[][] array = new ClientDynamicTilePart[tiles.length][];
        float startX = ExpoShared.chunkToPos(chunkX);
        float startY = ExpoShared.chunkToPos(chunkY);

        for(int i = 0; i < tiles.length; i++) {
            DynamicTilePart[] server = tiles[i];
            int x = i % 8;
            int y = i / 8;

            array[i] = new ClientDynamicTilePart[server.length];

            for(int j = 0; j < server.length; j++) {
                array[i][j] = new ClientDynamicTilePart(this, startX + TILE_SIZE * x, startY + TILE_SIZE * y, server[j]);
            }
        }

        return array;
    }

}